<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather App</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Weather App</h1>
        <div class="search-box">
            <input type="text" id="city" placeholder="Enter city name">
            <button onclick="getWeather()">Search</button>
        </div>
        <div id="weather-info" class="hidden">
            <h2 id="city-name"></h2>
            <p id="temperature"></p>
            <p id="humidity"></p>
            <p id="description"></p>
            <img id="weather-icon" src="" alt="Weather Icon">
        </div>
        <p id="error-message" class="error hidden"></p>
    </div>
    <script src="script.js"></script>
</body>
</html>

STYLE .CSS
body {
    font-family: Arial, sans-serif;
    text-align: center;
    background: #f0f8ff;
}

.container {
    margin-top: 50px;
    padding: 20px;
    background: white;
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
    border-radius: 8px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
}

.search-box {
    margin-bottom: 20px;
}

input {
    padding: 8px;
    width: 200px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

button {
    padding: 8px 12px;
    background-color: #007BFF;
    color: white;
    border: none;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

#error-message {
    color: red;
    font-weight: bold;
}

.hidden {
    display: none;
}
JAVA SCRIPT CODES
const apiKey = "402209ef0421263294565759bdf99ff1";
async function getWeather() {
    const city = document.getElementById("city").value;
    const weatherInfo = document.getElementById("weather-info");
    const errorMessage = document.getElementById("error-message");

    if (!city) {
        errorMessage.textContent = "Please enter a city name.";
        errorMessage.classList.remove("hidden");
        weatherInfo.classList.add("hidden");
        return;
    }

    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`);
        const data = await response.json();

        if (data.cod !== 200) {
            throw new Error(data.message);
        }

        document.getElementById("city-name").textContent = data.name;
        document.getElementById("temperature").textContent = `Temperature: ${data.main.temp}Â°C`;
        document.getElementById("humidity").textContent = `Humidity: ${data.main.humidity}%`;
        document.getElementById("description").textContent = `Weather: ${data.weather[0].description}`;
        document.getElementById("weather-icon").src = `https://openweathermap.org/img/wn/${data.weather[0].icon}.png`;

        errorMessage.classList.add("hidden");
        weatherInfo.classList.remove("hidden");
    } catch (error) {
        errorMessage.textContent = error.message;
        errorMessage.classList.remove("hidden");
        weatherInfo.classList.add("hidden");
    }
}
